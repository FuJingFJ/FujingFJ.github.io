<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>符静的个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fujingfj.github.io/"/>
  <updated>2017-09-01T01:34:06.778Z</updated>
  <id>https://fujingfj.github.io/</id>
  
  <author>
    <name>FuJing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>豆瓣Vue搭建踩坑</title>
    <link href="https://fujingfj.github.io/2017/09/01/%E8%B1%86%E7%93%A3Vue%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/"/>
    <id>https://fujingfj.github.io/2017/09/01/豆瓣Vue搭建踩坑/</id>
    <published>2017-09-01T01:33:35.000Z</published>
    <updated>2017-09-01T01:34:06.778Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>computed <ul>
<li>计算后属性会被添加到vue实例中，可以直接用<code>vue.属性名</code>调用<pre><code>
  computed: {
      attr: function(){
          return xxx
      }
  }
</code></pre>   </li>
</ul>
</li>
<li>vuex 中的getters<ul>
<li>可以当成store的计算属性</li>
</ul>
</li>
<li>vuex 的初步用法<ul>
<li>安装vuex<br>  <code>npm install vuex --save --dev</code></li>
<li>在src目录下创建store文件夹，并创建index.js文件，文件内引入vuex  <pre><code>
      import Vue from 'vue'
      import Vuex from 'vuex'
      Vue.use(Vuex)
  </code></pre></li>
</ul>
</li>
<li><p>创建store</p>
 <pre><code>
 const store = new Vuex.Store({
     state: {}, //数据对象
     getters: {},//state派生出的数据，store的计算属性，类似于computed
     mutations: {},//mutations触发会改变store的状态/state的数据
     actions: {}//提交mutations的函数，触发mutations
 })
 </code></pre>
</li>
<li><p>在<code>main.js</code>的Vue实例中绑定store  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import store from &apos;./stote&apos;  </div><div class="line">new Vue(&#123;  </div><div class="line">    el: &apos;#app&apos;,  </div><div class="line">    router,  </div><div class="line">    store,//绑定到根实例中  </div><div class="line">    template: &apos; &lt;App/&gt;&apos;,  </div><div class="line">    components: &#123;App&#125;,  </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>分割store模块，再统一导出</p>
<ul>
<li>可以在store目录下创建modules目录，分割模块，再在store目录下的index内导出，需要写在store的modules属性内<pre><code>
  //index中
  import example from './modules/example' 
  export default new Vuex.store({
      modules: { 
          example
      }
      })
  //example中,把模块当成一个对象导出到index里，再右index中的module接收管理 
  const state = {
      a: xx,
      b:xx,
  }
  export default {
      state
  }
</code></pre>

</li>
</ul>
</li>
</ol>
<h3 id="Markdown-Tips"><a href="#Markdown-Tips" class="headerlink" title="Markdown Tips"></a>Markdown Tips</h3><ul>
<li>代码块用<code>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</code>包裹</li>
<li>有序列表子项之间记得Tab缩进，不然会影响列表排序</li>
<li>单行代码用``包裹，换行直接在上一行结尾多加两个空格就行</li>
<li>标题下换行再直接缩进也可以引用代码块</li>
<li>每行结尾后加两个空格，就是换行</li>
</ul>
<h3 id="router-link-to"><a href="#router-link-to" class="headerlink" title="router-link :to"></a>router-link :to</h3><ul>
<li>通过to属性指定目标地址，默认渲染为带正确连接的<code>&lt;a&gt;</code>标签</li>
<li><p>to 后可带的值:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 字符串 --&gt;</div><div class="line">&lt;router-link to=&quot;home&quot;&gt;Home&lt;/router-link&gt;</div><div class="line">&lt;!-- 渲染结果 --&gt;</div><div class="line">&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</div><div class="line">&lt;router-link v-bind:to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</div><div class="line">&lt;router-link :to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 同上 --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; path: &apos;home&apos; &#125;&quot;&gt;Home&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 命名的路由 --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; name: &apos;user&apos;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;</div><div class="line"></div><div class="line">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</div><div class="line">&lt;router-link :to=&quot;&#123; path: &apos;register&apos;, query: &#123; plan: &apos;private&apos; &#125;&#125;&quot;&gt;Register&lt;/router-link&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h3><ul>
<li>引用单文件组件的时候，用标签标示</li>
<li><p>子组件使用父组件的数据，需要设置子组件的props选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(&apos;child&apos;, &#123;</div><div class="line">// 声明 props</div><div class="line">props: [&apos;message&apos;],</div><div class="line">// 就像 data 一样，prop 可以用在模板内</div><div class="line">// 同样也可以在vm实例中像“this.message”这样使用</div><div class="line">template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>slot插口</p>
<ul>
<li>子组件中有<code>&lt;slot&gt;&lt;/slot&gt;</code>插口，会保留父组件在子组件中写入的内容</li>
<li>具名slot<ul>
<li>slot下有个name属性可以在父组件中配置对应的slot内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//父组件  </div><div class="line">&lt;app&gt;</div><div class="line">    &lt;h1 slot=&quot;header&quot;&gt;&lt;/h1&gt;</div><div class="line">    &lt;compotent&gt;&lt;/compotent&gt;</div><div class="line">&lt;/app&gt;  </div><div class="line">//子组件</div><div class="line">&lt;template&gt;</div><div class="line">    &lt;slot name =&quot;header&quot;&gt;&lt;/slot&gt;</div><div class="line">    &lt;div&gt; content&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>组件中引用本地图片，还是按照目录的顺序引用，就算子组件还会被别的组件引用。路径按照引入图片的组件的目录为准</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;computed &lt;ul&gt;
&lt;li&gt;计算后属性会被添加到vue实例中，可以直接用&lt;code&gt;vue.属性名&lt;/code&gt;调用&lt;pre&gt;&lt;code&gt;
  computed: {
      attr: function(){
          return xx
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://fujingfj.github.io/2017/08/29/%E6%B5%8B%E8%AF%95/"/>
    <id>https://fujingfj.github.io/2017/08/29/测试/</id>
    <published>2017-08-29T08:25:41.000Z</published>
    <updated>2017-08-29T08:25:52.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown 测试</title>
    <link href="https://fujingfj.github.io/2017/08/28/Markdoen-%E6%B5%8B%E8%AF%95/"/>
    <id>https://fujingfj.github.io/2017/08/28/Markdoen-测试/</id>
    <published>2017-08-28T09:07:11.000Z</published>
    <updated>2017-08-28T09:36:58.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr>
<p><em>斜体</em> 或 <em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del></p>
<hr>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ol>
<li>这是一个<a href="http://baidu.com" target="_blank" rel="external">链接</a></li>
<li>锚点 只支持标题后添加锚点<ul>
<li>只支持标题后添加锚点</li>
</ul>
<hr>
</li>
</ol>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="/img/062002.png" alt="&#39;图片&#39;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
</feed>
